* detector bank layout
#+begin_src python
  import matplotlib.pyplot as plt
  from dataclasses import dataclass

  from matplotlib.patches import Wedge
  import matplotlib

  import numpy as np


  @dataclass
  class Bank:
      number: int
      offset: float

      @property
      def solid_angle(self):
          return (self.number - 1) * self.offset


  @dataclass
  class Primary:
      bank: Bank
      number: int
      offset: float

      @property
      def solid_angle(self):
          return (self.number - 1) * self.offset + self.bank.solid_angle


  def angle_to_measure(primary: Primary, max_theta: float, *, N=1024):
      bank_range = primary.bank.solid_angle

      th = np.linspace(0, max_theta, N)
      out = np.array(th)

      # from offset between the crystals to the solid angle of the bank, only have to move the offset
      cyrstal_offset_index = np.searchsorted(th, primary.bank.offset)

      if primary.number > 1:
          if (primary.offset - primary.bank.solid_angle) < primary.bank.offset:
              raise Exception("not sure this is practical, not modeled yet")

          solid_offset_index = np.searchsorted(
              th, primary.offset - primary.bank.solid_angle
          )
          out[solid_offset_index:] += primary.solid_angle
      else:
          solid_offset_index = None
      out[cyrstal_offset_index:solid_offset_index] += primary.bank.solid_angle

      return out, th


  def plot1():
      fig, ax = plt.subplots(layout="constrained")
      for j in range(1, 5):
          ax.plot(
              ,*angle_to_measure(Primary(Bank(5, 3), j, 20), 90),
              label=f"{j} banks",
              zorder=10 - j,
          )

      ax.plot(*angle_to_measure(Primary(Bank(1, 0), 25, 3), 90), label=f"25 spokes")

      ax.plot([0, 120], [0, 120], "k--")
      ax.set_xlim(0, 120)
      ax.set_ylim(0, 50)
      ax.legend()
      ax.set_xlabel("Angle measured")
      ax.set_ylabel("Angle moved")


  def plot2():
      fig, ax = plt.subplots(layout="constrained")
      ax.plot(
          ,*angle_to_measure(Primary(Bank(2, 3), 12, 9), 90),
          label="12 banks of 2",
      )
      ax.plot(
          ,*angle_to_measure(Primary(Bank(4, 3), 6, 15), 90),
          label="6 banks of 4",
      )
      ax.plot(
          ,*angle_to_measure(Primary(Bank(6, 3), 4, 21), 90),
          label="4 banks of 6",
      )
      ax.plot(
          ,*angle_to_measure(Primary(Bank(12, 3), 2, 39), 90),
          label="2 banks of 12",
      )
      ax.plot(*angle_to_measure(Primary(Bank(1, 0), 24, 3), 90), label=f"24 spokes")
      ax.set_xlim(0, 120)
      ax.set_ylim(0, 20)
      ax.legend()
      ax.set_xlabel("Angle measured")
      ax.set_ylabel("Angle moved")


  # plot2()
  def measure_khymo(
      primary: Primary,
      max_move: float,
      ,*,
      N_move: int = 1024,
      max_measure=120,
      N_measure=512,
  ):
      if primary.number > 1:
          if (primary.offset - primary.bank.solid_angle) < primary.bank.offset:
              raise Exception("not sure this is practical, not modeled yet")

      th_mv = np.linspace(0, max_move, N_move)
      th_measure = np.linspace(0, max_measure, N_measure)
      out = np.zeros((N_move, N_measure))

      for j in range(primary.number):
          base_offset = j * primary.offset
          for k in range(primary.bank.number):
              cry_offset = base_offset + k * primary.bank.offset
              covered_thetas = th_mv + cry_offset
              mi = np.searchsorted(th_measure, covered_thetas)
              last_indx = -100
              for n, indx in enumerate(mi):
                  if indx >= out.shape[1]:
                      break
                  if last_indx == indx:
                      continue
                  out[n:, indx] += 1
                  last_indx = indx
      return out, (0, max_measure, 0, max_move)


  def plot3(det, ax=None):
      img, extent = measure_khymo(det, 20, N_measure=1024 * 2)
      if ax is None:
          fig, ax = plt.subplots(layout="constrained", figsize=(4, 3))
      else:
          fig = ax.figure
      cm = plt.get_cmap("viridis").resampled(10)
      cm.set_under("w")
      im = ax.imshow(
          img,
          extent=extent,
          origin="lower",
          vmin=0.5,
          cmap=cm,
          aspect="auto",
          interpolation_stage="rgba",
          vmax=10.5,
      )
      fig.colorbar(im, label="crystal passes", extend="min")
      ax.set_xlabel("measured angle [deg]")
      ax.set_ylabel("moved angle [deg]")
      # ax.set_title(f'{det!r}')


  def plot_layout(det, *, ax=None, target=100):
      if ax is None:
          fig, ax = plt.subplots(layout="constrained", figsize=(4, 3))
      ax.set_aspect("equal")
      ax.set_ylim(-0.1, 1)
      ax.set_xlim(1, -0.4)
      ax.plot([0], [0], marker="o", ms=20, color="k")
      ax.axis("off")
      wedge_kwargs = {"center": (0, 0), "r": 0.9, "width": 0.5, "alpha": 0.5}
      cmap = matplotlib.colormaps["tab10"]


      min_range = min_to_theta(det, target)
      target_time = 30
      A = 1e-4
      rate = min_range / target_time
      speed = 2000 * A  # deg /s

      for n, color in enumerate(cmap(np.linspace(0, 1, det.number))):
          ax.add_artist(
              Wedge(
                  theta1=(det.offset * (n)),
                  theta2=(det.bank.solid_angle + det.offset * (n)),
                  ,**wedge_kwargs,
                  color=color,
              )
          )

          ax.add_artist(
              Wedge(
                  theta1=(det.offset * (n)) + min_range,
                  theta2=(det.bank.solid_angle + det.offset * (n)) + min_range,
                  center=(0, 0),
                  r=0.39,
                  width=0.075,
                  color=color,
                  alpha=0.3,
              )
          )

          base_th = det.offset * n
          for m in range(det.bank.number):
              th = np.deg2rad(base_th + m * det.bank.offset)
              ends = np.array(
                  [wedge_kwargs["r"], (wedge_kwargs["r"] - 0.5 * wedge_kwargs["width"])]
              )
              ax.plot(ends * np.cos(th), ends * np.sin(th), lw=2, color="k")

      ax.annotate(
          "\n".join(
              [
                  f"Number of banks: {det.number}",
                  f"Bank offset: {det.offset}°",
                  f"Crystal per Bank: {det.bank.number}",
                  f"Crystal offset: {det.bank.offset}°",
              ]
          ),
          (0, 1),
          xycoords="axes fraction",
          xytext=(5, 15),
          textcoords="offset points",
          usetex=True,
          va="top",
      )
      ax.annotate(
          "\n".join([f"Total Crystals: {det.number*det.bank.number}"]),
          (1, 1),
          xycoords="axes fraction",
          xytext=(0, 15),
          textcoords="offset points",
          usetex=True,
          va="top",
          ha="right",
      )

      ax.add_artist(
          Wedge(
              center=(0, 0),
              theta1=0,
              theta2=min_range,
              color=".5",
              r=.39,
              width=0.075,

          )
      )
      # ax.add_artist(w)
      # w = Wedge(
      #     center=(0, 0),
      #         theta1=min_range,
      #         theta2=min_range + det.bank.solid_angle,
      #         color='.2',
      #         r=wedge_kwargs['r'] - wedge_kwargs['width'] - .1,
      #         width=.1,
      #     )
      # ax.add_artist(w)

      ax.annotate(
          "\n".join(
              [
                  rf"\textbf{{{min_range:.1f}°}} motion required for full pattern [{target}°]",
                  rf"\textbf{{{rate:.2f}°/s}} and \textbf{{{int(np.ceil(rate/A)):d} fps}} for full pattern in {target_time}s",
                  rf"Full Pattern in \textbf{{{min_range / speed:.1f}s}} [{speed}°/s]",
              ]
          ),
          (0, 0),
          xycoords="axes fraction",
          xytext=(5, -4),
          textcoords="offset points",
          va="top",
          usetex=True,
      )


  def min_to_theta(det, target):
      out, th = angle_to_measure(det, 150, N=1024 * 4)
      return th[np.searchsorted(out, target)]
#+end_src

#+begin_src python
  layouts = [
      Primary(Bank(13, 2), 1, 0),
      Primary(Bank(13, 2), 4, 33),
      Primary(Bank(4, 2), 9, 14.5),
      Primary(Bank(44, 3), 1, 0),
  ]
#+end_src

** 4 panel
#+begin_src python
  outer_fig = plt.figure(layout="constrained", figsize=(12, 3))
  fig_arr = outer_fig.subfigures(1, 4, hspace=0, wspace=0)

  for fig, det, label in zip(fig_arr.flat, layouts, "ABCD"):
      ax = fig.subplots()
      plot_layout(det, ax=ax, target=130)
      fig.patch.set_linewidth(2)
      fig.patch.set_edgecolor("k")
      ax.annotate(
          rf"\textbf{{{label}}}",
          (1, 0),
          xytext=(-5, 5),
          xycoords="subfigure fraction",
          textcoords="offset points",
          usetex=True,
          ha="right",
      )

  plt.show()
  outer_fig.savefig('/tmp/layout_panels.png', dpi=300)
#+end_src

** lots of diagram

#+begin_src python
  def make_figure(det):
      fig, (ax1, ax2) = plt.subplots(1, 2, layout="constrained", figsize=(7, 3.6))
      plot_layout(det, ax=ax1)
      plot3(det, ax=ax2)
      # ax2.axvline(100, color="k", alpha=0.5)
      return fig


  for det, pth in zip(
      layouts,
      [
          "/tmp/seven_bank.png",
          "/tmp/three_bank.png",
          "/tmp/single_bank.png",
          "/tmp/bicyle_wheel.png",
      ],
  ):
      make_figure(det).savefig(pth, dpi=300)


  plt.show()
#+end_src
