[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"


[project]
name = "bad_tools"
authors = [{ name = "Thomas A Caswell", email = "tcaswell@bnl.gov" }]
description = "Tools for the BAD beamline as part of NEXT-III at NSLS-II."
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = ["xrt @ git+https://github.com/kklmn/xrt.git"]

[project.optional-dependencies]
test = []
dev = []
docs = []

reduction = []
shell = ["xontrib-jedi", "xontrib-vox"]

[project.urls]
Homepage = "https://github.com/tacaswell/bad_tools"
"Bug Tracker" = "https://github.com/tacaswell/bad_tools/issues"
Discussions = "https://github.com/tacaswell/bad_tools/discussions"
Changelog = "https://github.com/tacaswell/bad_tools/releases"


[tool.setuptools_scm]
write_to = "src/bad_tools/_version.py"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests"]


[tool.coverage]
run.source = ["bad_tools"]
port.exclude_lines = ['pragma: no cover', '\.\.\.', 'if typing.TYPE_CHECKING:']

[tool.mypy]
files = ["src", "tests"]
python_version = "3.12"
warn_unused_configs = true
strict = false
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "bad_tools.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["ophyd.*"]
ignore_missing_imports = true


[tool.ruff]
lint.select = [
  "E",
  "F",
  "W",   # flake8
  "B",   # flake8-bugbear
  "I",   # isort
  "ARG", # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "EM",  # flake8-errmsg
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "G",   # flake8-logging-format
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "RET", # flake8-return
  "RUF", # Ruff-specific
  "SIM", # flake8-simplify
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  "EXE", # flake8-executable
  "NPY", # NumPy specific rules
  "PD",  # pandas-vet
]
lint.extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long, trust the formatter to get it right
  "ISC001", # implicit concat, can be handy
  # QA for wrong opinions
  "RET504", # can use a 'redundent' local if you want
  "RET505", # return in else (clearer with the `else`)
  "SIM105", # contextlib.suppress rather than try...except (just use language)
  "SIM108", # ternaries are not actually clearer (just fewer lines)
  "PTH123", # Path.open vs open (using the builtin is fine)
  "PIE804", # creating dict to ** it is fine
  "C408",   # using dict() is fine
  "NPY002", # allow the old numpy random generator
]
lint.unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
lint.flake8-unused-arguments.ignore-variadic-names = true
lint.isort.required-imports = []
src = ["src"]
exclude = []
# Uncomment if using a _compat.typing backport
# typing-modules = ["bad_tools._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.pixi.system-requirements]
linux = "3.10"
libc = "2.17"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
bad_tools = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
glow = { features = ["glow"], solve-group = "default" }
reduce = { features = ["reduction"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
shell = { features = ["shell"], no-default-feature = true }
all = { features = ['shell', 'glow', 'reduction'] }
lint = { features = ['lint'], no-default-feature = true }

[tool.pixi.tasks]

[tool.pixi.dependencies]
numpy = ">=2.2.1,<3"
ophyd = ">=1.10.0,<2"
bluesky = ">=1.13.1rc2,<2"
pyopencl = ">=2024.3,<2025"
pyopengl = ">=3.1.6,<4"
ipython = ">=8.31.0,<9"
pytest = ">=8.3.4,<9"
pytest-cov = ">=6.0.0,<7"
sphinx = ">=8.1.3,<9"
sphinxcontrib-jquery = ">=4.1,<5"
distro = ">=1.9.0,<2"
tomli-w = ">=1.2.0,<2"
python = ">=3.11.11,<3.14"


[tool.pixi.feature.shell.dependencies]
xonsh = "*"

[tool.pixi.feature.glow.dependencies]
pyqt = "<6"
pyqtwebengine = ">=5.15.9,<6"

[tool.pixi.feature.docs.dependencies]
sphinx = "*"
numpydoc = "*"
sphinx-copybutton = ">=0.5.2,<0.6"
myst-parser = ">=4.0.0,<5"

[tool.pixi.feature.reduction.dependencies]
h5py = ">=3.12.1,<4"
matplotlib = "!=3.10.0"
pyopencl = ">=2024.3,<2025"
python = ">=3.11.11,<3.12"
pytools = "<2025"
scipy = ">=1.14.1,<2"
silx = "*"
ipykernel = ">=6.29.5,<7"
ipympl = ">=0.9.6,<0.10"
jupytext = ">=1.16.6,<2"

[tool.pixi.feature.reduction.target.linux-64.dependencies]
pocl = "*"

[tool.pixi.feature.reduction.pypi-dependencies]
multianalyzer = { git = "https://github.com/kif/multianalyzer.git" }

[tool.pixi.feature.lint.dependencies]
ruff = "*"
