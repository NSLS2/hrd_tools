[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"


[project]
name = "hrd_tools"
authors = [{ name = "Thomas A Caswell", email = "tcaswell@bnl.gov" }]
description = "Tools for the HRD beamline as part of NEXT-III at NSLS-II."
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = []

[project.optional-dependencies]
test = []
dev = []
docs = []
reduction = []
shell = ["xontrib-jedi", "xontrib-vox"]

[project.urls]
Homepage = "https://github.com/tacaswell/hrd_tools"
"Bug Tracker" = "https://github.com/tacaswell/hrd_tools/issues"
Discussions = "https://github.com/tacaswell/hrd_tools/discussions"
Changelog = "https://github.com/tacaswell/hrd_tools/releases"


[tool.setuptools_scm]
write_to = "src/hrd_tools/_version.py"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests"]


[tool.coverage]
run.source = ["hrd_tools"]
port.exclude_lines = ['pragma: no cover', '\.\.\.', 'if typing.TYPE_CHECKING:']

[tool.mypy]
files = ["src", "tests"]
python_version = "3.12"
warn_unused_configs = true
strict = false
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "hrd_tools.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["ophyd.*"]
ignore_missing_imports = true


[tool.ruff]
src = ["src"]
exclude = []
# Uncomment if using a _compat.typing backport
# typing-modules = ["hrd_tools._compat.typing"]

[tool.ruff.lint]
select = [
  "E",
  "F",
  "W",   # flake8
  "B",   # flake8-bugbear
  "I",   # isort
  "ARG", # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "EM",  # flake8-errmsg
  "ISC", # flake8-implicit-str-concat
  "G",   # flake8-logging-format
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "RET", # flake8-return
  "RUF", # Ruff-specific
  "SIM", # flake8-simplify
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  "EXE", # flake8-executable
  "NPY", # NumPy specific rules
  "PD",  # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long, trust the formatter to get it right
  "ISC001", # implicit concat, can be handy
  # QA for wrong opinions
  "RET504", # can use a 'redundent' local if you want
  "RET505", # return in else (clearer with the `else`)
  "SIM105", # contextlib.suppress rather than try...except (just use language)
  "SIM108", # ternaries are not actually clearer (just fewer lines)
  "PTH123", # Path.open vs open (using the builtin is fine)
  "PIE804", # creating dict to ** it is fine
  "C408",   # using dict() is fine
  "NPY002", # allow the old numpy random generator
  "PD901",  # df is a fine variable name
  "EM102",  # use an fstring in an exception if you want
]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = []

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.pixi.system-requirements]
linux = "3.10"
libc = "2.17"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
hrd_tools = { path = ".", editable = true }

[tool.pixi.environments]
default = { features = ["reduction"], solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
xrt = { features = ["xrt"], solve-group = "default" }
glow = { features = ["glow", "xrt"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
shell = { features = ["shell"], no-default-feature = true }
lint = { features = ['lint'], no-default-feature = true }
tiled = { features = ['tiled'] }
bluesky = ["bluesky"]

[tool.pixi.tasks]


[tool.pixi.dependencies]
ipython = ">=8.31.0,<9"
cycler = ">=0.12.1,<0.13"
distro = ">=1.9.0,<2"
tomli-w = ">=1.2.0,<2"
python = ">=3.11.11,<3.14"
jinja2 = ">=3.1.5,<4"


[tool.pixi.feature.dev.dependencies]
pytest = ">=8.3.4,<9"
pytest-cov = ">=6.0.0,<7"

[tool.pixi.feature.shell.dependencies]
xonsh = "*"

[tool.pixi.feature.glow.dependencies]
pyqt = "<6"
pyqtwebengine = ">=5.15.9,<6"
pyopengl = ">=3.1.6,<4"

[tool.pixi.feature.docs.dependencies]
numpydoc = "*"
sphinx-copybutton = ">=0.5.2,<0.6"
myst-parser = ">=4.0.0,<5"
sphinx = ">=8.1.3,<9"
sphinxcontrib-jquery = ">=4.1,<5"

[tool.pixi.feature.reduction.dependencies]
h5py = ">=3.12.1,<4"
matplotlib = "*"
pyopencl = ">=2024.3,<2026"
python = ">=3.11.11,<3.14"
pytools = "<2026"
scipy = ">=1.15.1,<2"
silx = "*"
ipykernel = ">=6.29.5,<7"
ipympl = ">=0.9.6,<0.10"
jupytext = ">=1.16.6,<2"
pandas = '*'
tiled = ">=0.1.0b17"

[tool.pixi.feature.reduction.target.linux-64.dependencies]
pocl = "*"

[tool.pixi.feature.reduction.pypi-dependencies]
multianalyzer = { git = "https://github.com/kif/multianalyzer.git" }

[tool.pixi.feature.xrt.pypi-dependencies]
xrt = { git = "https://github.com/kklmn/xrt.git" }

[tool.pixi.feature.xrt.dependencies]
pyopencl = ">=2024.3,<2026"
numpy = ">=2.1.1,<3"
pandas = ">=2.2.3,<3"
tqdm = ">=4.67.1,<5"
h5py = ">=3.12.1,<4"


[tool.pixi.feature.bluesky.dependencies]
bluesky = ">=1.13.1rc2,<2"
ophyd = ">=1.10.0,<2"

[tool.pixi.feature.lint.dependencies]
ruff = "*"

[tool.pixi.feature.lint.tasks]
check = "ruff check --fix --exclude=sims"
format = "ruff format --exclude=sims"
lint = { depends-on = ["format", "check"] }

[tool.pixi.feature.tiled.dependencies]
tiled = "*"
h5py = "*"

[tool.pixi.feature.tiled.tasks]
tiled_serve = { cmd = "tiled serve config config.yml --public", cwd = "tiled", env = { TILED_API_KEY = 'secret' } }
tiled_register = { cmd = "python register_helper.py /nsls2/data3/projects/next_iiia_hrd/xrt_output/", cwd = 'tiled', env = { TILED_API_KEY = 'secret' } }
